#include <iostream>
#include <stdio.h>
#include <opencv\cv.h>
#include <opencv\cxcore.h>
#include <opencv\highgui.h>  
#include <opencv2\imgproc\imgproc.hpp>

using namespace cv;
using namespace std;

int main(int argc, char *argv[])
{
	if(argc != 3) {
		cout << " Usage: display_image ImageTo Loaded and Display" << endl;
		return -1;
	}
	
	Mat image;
	image = imread(argv[1], IMREAD_COLOR); //Read the file
	int T = atoi(argv[2]);

	if (!image.data) {
		cout << " Could not load the image" << std::endl;
		return -1;
	}

	Mat gr;
	
	cvtColor(image, gr, CV_BGR2GRAY, 0); //Convert color image to gray

	int h = gr.rows;
	int w = gr.cols;
	cout << "width: " << w << endl;
	cout << "Height: " << h << endl;

	Mat med = gr.clone(); //Copy of image for the Histogram Equalization
	int Gx = 0;
	int Gy = 0;
	int G = 0;
	//int T = 10;

	//Take median of 3X3
	for (int i = 0; i < h-1; i++) { 
		for (int j = 0; j < w-1; j++) {
			Gx = gr.at<uchar>(i, j) - gr.at<uchar>(i, j + 1); //j-column
			Gy = gr.at<uchar>(i, j) - gr.at<uchar>(i + 1, j);
			G = abs(Gx) + abs(Gy);
			if (G >= T)
				med.at<uchar>(i, j) = 0;
			else
				med.at<uchar>(i, j) = 255;
		}
	}

	namedWindow("Display window", WINDOW_AUTOSIZE); //Create a window for display
	imshow("Display window", med); //Show our image inside it
	namedWindow("Display Gray", WINDOW_AUTOSIZE); //Create a window for display
	imshow("Display Gray", gr); //Show our image inside it
	
	cvWaitKey(0); //wait for a keystroke in the window

	image.release();
	gr.release();
	med.release();

	return 0;

}